--- lib/redmine/imap.rb 2017-07-16 21:18:26.000000000 +0300 
+++ lib/redmine/imap.rb	2024-02-19 19:23:42.000000000 +0200
@@ -28,32 +28,57 @@
         ssl = !imap_options[:ssl].nil?
         starttls = !imap_options[:starttls].nil?
         folder = imap_options[:folder] || 'INBOX'
+        logger = Logger.new('/usr/src/redmine/log/incoming_emails.log', 10, 1000000)
+        folders = folder.split(',')
+        exclude_folders = imap_options[:exclude_folders] || 'Drafts,Sent,Spam,Trash,DONE,ERRORS'
+        exclude_folders = exclude_folders.split(',')
+        # logger.debug "Excluded folders: #{exclude_folders}"
 
         imap = Net::IMAP.new(host, port, ssl)
         if starttls
           imap.starttls
         end
         imap.login(imap_options[:username], imap_options[:password]) unless imap_options[:username].nil?
-        imap.select(folder)
-        imap.uid_search(['NOT', 'SEEN']).each do |uid|
-          msg = imap.uid_fetch(uid,'RFC822')[0].attr['RFC822']
-          logger.debug "Receiving message #{uid}" if logger && logger.debug?
-          if MailHandler.safe_receive(msg, options)
-            logger.debug "Message #{uid} successfully received" if logger && logger.debug?
-            if imap_options[:move_on_success]
-              imap.uid_copy(uid, imap_options[:move_on_success])
-            end
-            imap.uid_store(uid, "+FLAGS", [:Seen, :Deleted])
-          else
-            logger.debug "Message #{uid} can not be processed" if logger && logger.debug?
-            imap.uid_store(uid, "+FLAGS", [:Seen])
-            if imap_options[:move_on_failure]
-              imap.uid_copy(uid, imap_options[:move_on_failure])
-              imap.uid_store(uid, "+FLAGS", [:Deleted])
+
+        if folder == "*"
+          imap_folders = imap.list("", "*").map(&:name)
+          folders = imap_folders.reject do |element| 
+            exclude_folders.any? { |substring| element.downcase.include?(substring.downcase) }
+          end
+        end
+        # logger.info "Folders to scan: #{folders}"
+
+        folders.each do |folder|
+          imap.select(folder)
+
+          imap.uid_search(['ALL']).each do |uid|
+            flags = imap.uid_fetch(uid, ['FLAGS'])[0].attr['FLAGS']
+            envelope = imap.uid_fetch(uid,'ENVELOPE')[0].attr['ENVELOPE']
+            from = envelope.from[0].mailbox + "@" + envelope.from[0].host
+            to = envelope.to[0].mailbox + "@" + envelope.to[0].host
+            logger.info "Found in #{folder} message #{uid} from #{from} to #{to}, flags: #{flags}, subject: #{envelope.subject}"
+          end
+
+          imap.uid_search(['NOT', 'SEEN']).each do |uid|
+            msg = imap.uid_fetch(uid,'RFC822')[0].attr['RFC822']
+            logger.info "Processing message #{uid}" if logger && logger.info?
+            if MailHandler.safe_receive(msg, options)
+              logger.info "Message #{uid} successfully received" if logger && logger.info?
+              if imap_options[:move_on_success]
+                imap.uid_copy(uid, imap_options[:move_on_success])
+              end
+              imap.uid_store(uid, "+FLAGS", [:Seen, :Deleted])
+            else
+              logger.error "Message #{uid} can not be processed" if logger && logger.error?
+              imap.uid_store(uid, "-FLAGS", [:Seen])
+              if imap_options[:move_on_failure]
+                imap.uid_copy(uid, imap_options[:move_on_failure])
+                imap.uid_store(uid, "+FLAGS", [:Deleted])
+              end
             end
           end
+          imap.expunge
         end
-        imap.expunge
         imap.logout
         imap.disconnect
       end

--- lib/tasks/email.rake	2024-02-19 19:24:49.000000000 +0200
+++ lib/tasks/email.rake	2024-02-19 17:50:26.000000000 +0200
@@ -114,6 +114,7 @@
                       :username => ENV['username'],
                       :password => ENV['password'],
                       :folder => ENV['folder'],
+                      :exclude_folders => ENV['exclude_folders'],
                       :move_on_success => ENV['move_on_success'],
                       :move_on_failure => ENV['move_on_failure']}
 
